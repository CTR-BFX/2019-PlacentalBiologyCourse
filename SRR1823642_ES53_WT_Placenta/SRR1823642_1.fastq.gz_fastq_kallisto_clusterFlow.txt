
--------------------------------------------------------------------------------
Module:			fastqc
Run File:		SRR1823642_1.fastq.gz_fastq_kallisto.run
Job ID:			cf_fastq_kallisto_1466004316_fastqc_446
Previous Job ID:	start_000
Date & Time:		16:28, 15-06-2016
--------------------------------------------------------------------------------

---------- FastQC version information ----------
FastQC v0.11.5

------- End of FastQC version information ------

###CFCMD fastqc -q  SRR1823642_1.fastq.gz

###CF FastQC successfully ran, took 2 minutes, 40 seconds

###CFCMD fastqc -q  SRR1823642_2.fastq.gz

###CF FastQC successfully ran, took 2 minutes, 39 seconds




--------------------------------------------------------------------------------
Module:			trim_galore
Run File:		SRR1823642_1.fastq.gz_fastq_kallisto.run
Job ID:			cf_fastq_kallisto_1466004316_trim_galore_691
Previous Job ID:	start_000
Date & Time:		16:28, 15-06-2016
--------------------------------------------------------------------------------

---------- Cutadapt version information ----------
1.8.1

------- End of Cutadapt version information ------
---------- Trim Galore! version information ----------

                          Quality-/Adapter-/RRBS-Trimming
                               (powered by Cutadapt)
                                  version 0.4.1

                             Last update: 20 07 2015


------- End of Trim Galore! version information ------

###CFCMD trim_galore --paired --gzip --phred33       --fastqc SRR1823642_1.fastq.gz SRR1823642_2.fastq.gz

Path to Cutadapt set as: 'cutadapt' (default)
1.8.1
Cutadapt seems to be working fine (tested command 'cutadapt --version')


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> SRR1823642_1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Illumina	1468	AGATCGGAAGAGC	1000000	0.15
smallRNA	2	TGGAATTCTCGG	1000000	0.00
Nextera	1	CTGTCTCTTATA	1000000	0.00
Using Illumina adapter for trimming (count: 1468). Second best hit was smallRNA (count: 2)

Writing report to 'SRR1823642_1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: SRR1823642_1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.4.1
Cutadapt version: 1.8.1
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Writing final adapter and quality trimmed output to SRR1823642_1_trimmed.fq.gz


  >>> Now performing quality (cutoff 20) and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file SRR1823642_1.fastq.gz <<< 
10000000 sequences processed
20000000 sequences processed
This is cutadapt 1.8.1 with Python 2.7.5
Command line parameters: -f fastq -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC SRR1823642_1.fastq.gz
Trimming 1 adapter with at most 10.0% errors in single-end mode ...
Finished in 392.95 s (17 us/read; 3.63 M reads/minute).

=== Summary ===

Total reads processed:              23,762,312
Reads with adapters:                 7,488,514 (31.5%)
Reads written (passing filters):    23,762,312 (100.0%)

Total basepairs processed: 1,211,877,912 bp
Quality-trimmed:             151,852,969 bp (12.5%)
Total written (filtered):  1,048,765,930 bp (86.5%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 7488514 times.

No. of allowed errors:
0-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 29.7%
  C: 33.4%
  G: 20.6%
  T: 15.9%
  none/other: 0.4%

Overview of removed sequences
length	count	expect	max.err	error counts
1	5056706	5940578.0	0	5056706
2	1792944	1485144.5	0	1792944
3	474478	371286.1	0	474478
4	95600	92821.5	0	95600
5	21596	23205.4	0	21596
6	5326	5801.3	0	5326
7	3847	1450.3	0	3847
8	2425	362.6	0	2425
9	3478	90.6	0	1851 1627
10	3618	22.7	1	2723 895
11	2644	5.7	1	1943 701
12	2735	1.4	1	2511 224
13	1516	0.4	1	1405 111
14	2414	0.4	1	2235 179
15	3041	0.4	1	2813 228
16	1321	0.4	1	1211 110
17	1582	0.4	1	1476 106
18	1050	0.4	1	958 92
19	986	0.4	1	913 73
20	1224	0.4	1	1126 98
21	692	0.4	1	626 66
22	725	0.4	1	649 76
23	951	0.4	1	862 89
24	978	0.4	1	887 91
25	609	0.4	1	544 65
26	613	0.4	1	533 80
27	475	0.4	1	418 57
28	574	0.4	1	507 67
29	550	0.4	1	471 79
30	410	0.4	1	322 88
31	643	0.4	1	536 107
32	384	0.4	1	291 93
33	404	0.4	1	333 71
34	303	0.4	1	247 56
35	315	0.4	1	258 57
36	242	0.4	1	176 66
37	340	0.4	1	292 48
38	179	0.4	1	147 32
39	82	0.4	1	59 23
40	30	0.4	1	8 22
41	39	0.4	1	18 21
42	79	0.4	1	35 44
43	60	0.4	1	38 22
44	31	0.4	1	16 15
45	15	0.4	1	7 8
46	41	0.4	1	12 29
47	26	0.4	1	13 13
48	73	0.4	1	21 52
49	37	0.4	1	4 33
50	32	0.4	1	5 27
51	51	0.4	1	0 51


RUN STATISTICS FOR INPUT FILE: SRR1823642_1.fastq.gz
=============================================
23762312 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to 'SRR1823642_2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: SRR1823642_2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.4.1
Cutadapt version: 1.8.1
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Writing final adapter and quality trimmed output to SRR1823642_2_trimmed.fq.gz


  >>> Now performing quality (cutoff 20) and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file SRR1823642_2.fastq.gz <<< 
10000000 sequences processed
20000000 sequences processed
This is cutadapt 1.8.1 with Python 2.7.5
Command line parameters: -f fastq -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC SRR1823642_2.fastq.gz
Trimming 1 adapter with at most 10.0% errors in single-end mode ...
Finished in 405.70 s (17 us/read; 3.51 M reads/minute).

=== Summary ===

Total reads processed:              23,762,312
Reads with adapters:                 7,526,081 (31.7%)
Reads written (passing filters):    23,762,312 (100.0%)

Total basepairs processed: 1,211,877,912 bp
Quality-trimmed:             160,242,714 bp (13.2%)
Total written (filtered):  1,040,138,051 bp (85.8%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 7526081 times.

No. of allowed errors:
0-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 29.6%
  C: 33.2%
  G: 20.8%
  T: 16.1%
  none/other: 0.3%

Overview of removed sequences
length	count	expect	max.err	error counts
1	4982857	5940578.0	0	4982857
2	1904829	1485144.5	0	1904829
3	472849	371286.1	0	472849
4	91861	92821.5	0	91861
5	19783	23205.4	0	19783
6	5487	5801.3	0	5487
7	4294	1450.3	0	4294
8	3013	362.6	0	3013
9	4228	90.6	0	2294 1934
10	4213	22.7	1	3246 967
11	2776	5.7	1	2105 671
12	3427	1.4	1	3121 306
13	1625	0.4	1	1534 91
14	3541	0.4	1	3307 234
15	1643	0.4	1	1526 117
16	1143	0.4	1	1047 96
17	2324	0.4	1	2163 161
18	1027	0.4	1	950 77
19	2214	0.4	1	2072 142
20	843	0.4	1	769 74
21	370	0.4	1	327 43
22	1000	0.4	1	928 72
23	1192	0.4	1	1090 102
24	1700	0.4	1	1569 131
25	513	0.4	1	459 54
26	460	0.4	1	414 46
27	352	0.4	1	316 36
28	759	0.4	1	711 48
29	448	0.4	1	396 52
30	1349	0.4	1	1245 104
31	820	0.4	1	736 84
32	621	0.4	1	564 57
33	197	0.4	1	161 36
34	225	0.4	1	195 30
35	349	0.4	1	318 31
36	246	0.4	1	225 21
37	264	0.4	1	229 35
38	102	0.4	1	85 17
39	210	0.4	1	185 25
40	103	0.4	1	82 21
41	133	0.4	1	113 20
42	182	0.4	1	143 39
43	54	0.4	1	35 19
44	95	0.4	1	68 27
45	70	0.4	1	62 8
46	31	0.4	1	12 19
47	22	0.4	1	6 16
48	134	0.4	1	72 62
49	41	0.4	1	27 14
50	21	0.4	1	4 17
51	41	0.4	1	6 35


RUN STATISTICS FOR INPUT FILE: SRR1823642_2.fastq.gz
=============================================
23762312 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files SRR1823642_1_trimmed.fq.gz and SRR1823642_2_trimmed.fq.gz
file_1: SRR1823642_1_trimmed.fq.gz, file_2: SRR1823642_2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: SRR1823642_1_trimmed.fq.gz and SRR1823642_2_trimmed.fq.gz <<<<<
Writing validated paired-end read 1 reads to SRR1823642_1_val_1.fq.gz
Writing validated paired-end read 2 reads to SRR1823642_2_val_2.fq.gz

Total number of sequences analysed: 23762312

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 3837542 (16.15%)


  >>> Now running FastQC on the validated data SRR1823642_1_val_1.fq.gz<<<

Started analysis of SRR1823642_1_val_1.fq.gz
Approx 5% complete for SRR1823642_1_val_1.fq.gz
Approx 10% complete for SRR1823642_1_val_1.fq.gz
Approx 15% complete for SRR1823642_1_val_1.fq.gz
Approx 20% complete for SRR1823642_1_val_1.fq.gz
Approx 25% complete for SRR1823642_1_val_1.fq.gz
Approx 30% complete for SRR1823642_1_val_1.fq.gz
Approx 35% complete for SRR1823642_1_val_1.fq.gz
Approx 40% complete for SRR1823642_1_val_1.fq.gz
Approx 45% complete for SRR1823642_1_val_1.fq.gz
Approx 50% complete for SRR1823642_1_val_1.fq.gz
Approx 55% complete for SRR1823642_1_val_1.fq.gz
Approx 60% complete for SRR1823642_1_val_1.fq.gz
Approx 65% complete for SRR1823642_1_val_1.fq.gz
Approx 70% complete for SRR1823642_1_val_1.fq.gz
Approx 75% complete for SRR1823642_1_val_1.fq.gz
Approx 80% complete for SRR1823642_1_val_1.fq.gz
Approx 85% complete for SRR1823642_1_val_1.fq.gz
Approx 90% complete for SRR1823642_1_val_1.fq.gz
Approx 95% complete for SRR1823642_1_val_1.fq.gz
Analysis complete for SRR1823642_1_val_1.fq.gz

  >>> Now running FastQC on the validated data SRR1823642_2_val_2.fq.gz<<<

Started analysis of SRR1823642_2_val_2.fq.gz
Approx 5% complete for SRR1823642_2_val_2.fq.gz
Approx 10% complete for SRR1823642_2_val_2.fq.gz
Approx 15% complete for SRR1823642_2_val_2.fq.gz
Approx 20% complete for SRR1823642_2_val_2.fq.gz
Approx 25% complete for SRR1823642_2_val_2.fq.gz
Approx 30% complete for SRR1823642_2_val_2.fq.gz
Approx 35% complete for SRR1823642_2_val_2.fq.gz
Approx 40% complete for SRR1823642_2_val_2.fq.gz
Approx 45% complete for SRR1823642_2_val_2.fq.gz
Approx 50% complete for SRR1823642_2_val_2.fq.gz
Approx 55% complete for SRR1823642_2_val_2.fq.gz
Approx 60% complete for SRR1823642_2_val_2.fq.gz
Approx 65% complete for SRR1823642_2_val_2.fq.gz
Approx 70% complete for SRR1823642_2_val_2.fq.gz
Approx 75% complete for SRR1823642_2_val_2.fq.gz
Approx 80% complete for SRR1823642_2_val_2.fq.gz
Approx 85% complete for SRR1823642_2_val_2.fq.gz
Approx 90% complete for SRR1823642_2_val_2.fq.gz
Approx 95% complete for SRR1823642_2_val_2.fq.gz
Analysis complete for SRR1823642_2_val_2.fq.gz
Deleting both intermediate output files SRR1823642_1_trimmed.fq.gz and SRR1823642_2_trimmed.fq.gz

====================================================================================================

###CF Trim galore (PE mode) successfully exited, took 27 minutes, 25 seconds..




--------------------------------------------------------------------------------
Module:			kallisto
Run File:		SRR1823642_1.fastq.gz_fastq_kallisto.run
Job ID:			cf_fastq_kallisto_1466004316_kallisto_644
Previous Job ID:	cf_fastq_kallisto_1466004316_trim_galore_691
Date & Time:		16:56, 15-06-2016
--------------------------------------------------------------------------------


Pseudoaligning against /home/rsh46/scratch/Genomes/Mus_musculus/GRCm38/Mus_musculus.GRCm38.cdna.all.idx

---------- Kallisto version information ----------
kallisto, version 0.43.0

------- End of Kallisto version information ------

###CFCMD kallisto quant -t 1 --pseudobam -i /home/rsh46/scratch/Genomes/Mus_musculus/GRCm38/Mus_musculus.GRCm38.cdna.all.idx -o SRR1823642_1_val_1.fq.gz_kallisto_output -b 100 SRR1823642_1_val_1.fq.gz SRR1823642_2_val_2.fq.gz | samtools view -Sb - > SRR1823642_1_val_1.fq.gz_kallisto.bam


[quant] fragment length distribution will be estimated from the data
[index] k-mer length: 31
[index] number of targets: 96,626
[index] number of k-mers: 87,312,671
[index] number of equivalence classes: 333,129
[quant] running in paired-end mode
[quant] will process pair 1: SRR1823642_1_val_1.fq.gz
                             SRR1823642_2_val_2.fq.gz
[quant] finding pseudoalignments for the reads ... done
[quant] processed 19,924,770 reads, 16,083,793 reads pseudoaligned
[quant] estimated average fragment length: 335.646
[   em] quantifying the abundances ... done
[   em] the Expectation-Maximization algorithm ran for 1,051 rounds
[bstrp] running EM for the bootstrap: 1[bstrp] running EM for the bootstrap: 2[bstrp] running EM for the bootstrap: 3[bstrp] running EM for the bootstrap: 4[bstrp] running EM for the bootstrap: 5[bstrp] running EM for the bootstrap: 6[bstrp] running EM for the bootstrap: 7[bstrp] running EM for the bootstrap: 8[bstrp] running EM for the bootstrap: 9[bstrp] running EM for the bootstrap: 10[bstrp] running EM for the bootstrap: 11[bstrp] running EM for the bootstrap: 12[bstrp] running EM for the bootstrap: 13[bstrp] running EM for the bootstrap: 14[bstrp] running EM for the bootstrap: 15[bstrp] running EM for the bootstrap: 16[bstrp] running EM for the bootstrap: 17[bstrp] running EM for the bootstrap: 18[bstrp] running EM for the bootstrap: 19[bstrp] running EM for the bootstrap: 20[bstrp] running EM for the bootstrap: 21[bstrp] running EM for the bootstrap: 22[bstrp] running EM for the bootstrap: 23[bstrp] running EM for the bootstrap: 24[bstrp] running EM for the bootstrap: 25[bstrp] running EM for the bootstrap: 26[bstrp] running EM for the bootstrap: 27[bstrp] running EM for the bootstrap: 28[bstrp] running EM for the bootstrap: 29[bstrp] running EM for the bootstrap: 30[bstrp] running EM for the bootstrap: 31[bstrp] running EM for the bootstrap: 32[bstrp] running EM for the bootstrap: 33[bstrp] running EM for the bootstrap: 34[bstrp] running EM for the bootstrap: 35[bstrp] running EM for the bootstrap: 36[bstrp] running EM for the bootstrap: 37[bstrp] running EM for the bootstrap: 38[bstrp] running EM for the bootstrap: 39[bstrp] running EM for the bootstrap: 40[bstrp] running EM for the bootstrap: 41[bstrp] running EM for the bootstrap: 42[bstrp] running EM for the bootstrap: 43[bstrp] running EM for the bootstrap: 44[bstrp] running EM for the bootstrap: 45[bstrp] running EM for the bootstrap: 46[bstrp] running EM for the bootstrap: 47[bstrp] running EM for the bootstrap: 48[bstrp] running EM for the bootstrap: 49[bstrp] running EM for the bootstrap: 50[bstrp] running EM for the bootstrap: 51[bstrp] running EM for the bootstrap: 52[bstrp] running EM for the bootstrap: 53[bstrp] running EM for the bootstrap: 54[bstrp] running EM for the bootstrap: 55[bstrp] running EM for the bootstrap: 56[bstrp] running EM for the bootstrap: 57[bstrp] running EM for the bootstrap: 58[bstrp] running EM for the bootstrap: 59[bstrp] running EM for the bootstrap: 60[bstrp] running EM for the bootstrap: 61[bstrp] running EM for the bootstrap: 62[bstrp] running EM for the bootstrap: 63[bstrp] running EM for the bootstrap: 64[bstrp] running EM for the bootstrap: 65[bstrp] running EM for the bootstrap: 66[bstrp] running EM for the bootstrap: 67[bstrp] running EM for the bootstrap: 68[bstrp] running EM for the bootstrap: 69[bstrp] running EM for the bootstrap: 70[bstrp] running EM for the bootstrap: 71[bstrp] running EM for the bootstrap: 72[bstrp] running EM for the bootstrap: 73[bstrp] running EM for the bootstrap: 74[bstrp] running EM for the bootstrap: 75[bstrp] running EM for the bootstrap: 76[bstrp] running EM for the bootstrap: 77[bstrp] running EM for the bootstrap: 78[bstrp] running EM for the bootstrap: 79[bstrp] running EM for the bootstrap: 80[bstrp] running EM for the bootstrap: 81[bstrp] running EM for the bootstrap: 82[bstrp] running EM for the bootstrap: 83[bstrp] running EM for the bootstrap: 84[bstrp] running EM for the bootstrap: 85[bstrp] running EM for the bootstrap: 86[bstrp] running EM for the bootstrap: 87[bstrp] running EM for the bootstrap: 88[bstrp] running EM for the bootstrap: 89[bstrp] running EM for the bootstrap: 90[bstrp] running EM for the bootstrap: 91[bstrp] running EM for the bootstrap: 92[bstrp] running EM for the bootstrap: 93[bstrp] running EM for the bootstrap: 94[bstrp] running EM for the bootstrap: 95[bstrp] running EM for the bootstrap: 96[bstrp] running EM for the bootstrap: 97[bstrp] running EM for the bootstrap: 98[bstrp] running EM for the bootstrap: 99[bstrp] running EM for the bootstrap: 100

###CF kallisto (PE mode) successfully exited, took 1 hours, 7 minutes, 6 seconds..



--------------------------------------------------------------------------------
Unrecognised output: (indicated with "-> <-")
--------------------------------------------------------------------------------
-> slurmstepd: Exceeded job memory limit at some point. <-

================================================================================





###CF Run finished at 18:04 15-06-2016


###CF Pipeline fastq_kallisto finished at 18:04 15-06-2016

Sending HTML e-mail with sendmail..
Sent a pipeline e-mail notification to rsh46@cam.ac.uk
