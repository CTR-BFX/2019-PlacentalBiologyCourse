
--------------------------------------------------------------------------------
Module:			fastqc
Run File:		SRR1823638_1.fastq.gz_fastq_kallisto.run
Job ID:			cf_fastq_kallisto_1466004228_fastqc_422
Previous Job ID:	start_000
Date & Time:		16:24, 15-06-2016
--------------------------------------------------------------------------------

---------- FastQC version information ----------
FastQC v0.11.5

------- End of FastQC version information ------

###CFCMD fastqc -q  SRR1823638_1.fastq.gz

###CF FastQC successfully ran, took 3 minutes, 16 seconds

###CFCMD fastqc -q  SRR1823638_2.fastq.gz

###CF FastQC successfully ran, took 3 minutes, 17 seconds




--------------------------------------------------------------------------------
Module:			trim_galore
Run File:		SRR1823638_1.fastq.gz_fastq_kallisto.run
Job ID:			cf_fastq_kallisto_1466004228_trim_galore_604
Previous Job ID:	start_000
Date & Time:		16:24, 15-06-2016
--------------------------------------------------------------------------------

---------- Cutadapt version information ----------
1.8.1

------- End of Cutadapt version information ------
---------- Trim Galore! version information ----------

                          Quality-/Adapter-/RRBS-Trimming
                               (powered by Cutadapt)
                                  version 0.4.1

                             Last update: 20 07 2015


------- End of Trim Galore! version information ------

###CFCMD trim_galore --paired --gzip --phred33       --fastqc SRR1823638_1.fastq.gz SRR1823638_2.fastq.gz

Path to Cutadapt set as: 'cutadapt' (default)
1.8.1
Cutadapt seems to be working fine (tested command 'cutadapt --version')


AUTO-DETECTING ADAPTER TYPE
===========================
Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> SRR1823638_1.fastq.gz <<)

Found perfect matches for the following adapter sequences:
Adapter type	Count	Sequence	Sequences analysed	Percentage
Illumina	2704	AGATCGGAAGAGC	1000000	0.27
Nextera	5	CTGTCTCTTATA	1000000	0.00
smallRNA	2	TGGAATTCTCGG	1000000	0.00
Using Illumina adapter for trimming (count: 2704). Second best hit was Nextera (count: 5)

Writing report to 'SRR1823638_1.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: SRR1823638_1.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.4.1
Cutadapt version: 1.8.1
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Writing final adapter and quality trimmed output to SRR1823638_1_trimmed.fq.gz


  >>> Now performing quality (cutoff 20) and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file SRR1823638_1.fastq.gz <<< 
10000000 sequences processed
20000000 sequences processed
This is cutadapt 1.8.1 with Python 2.7.5
Command line parameters: -f fastq -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC SRR1823638_1.fastq.gz
Trimming 1 adapter with at most 10.0% errors in single-end mode ...
Finished in 502.68 s (17 us/read; 3.50 M reads/minute).

=== Summary ===

Total reads processed:              29,335,802
Reads with adapters:                 9,883,574 (33.7%)
Reads written (passing filters):    29,335,802 (100.0%)

Total basepairs processed: 1,496,125,902 bp
Quality-trimmed:             346,608,424 bp (23.2%)
Total written (filtered):  1,133,656,013 bp (75.8%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 9883574 times.

No. of allowed errors:
0-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 31.4%
  C: 30.9%
  G: 19.7%
  T: 16.5%
  none/other: 1.6%

Overview of removed sequences
length	count	expect	max.err	error counts
1	6680136	7333950.5	0	6680136
2	2273232	1833487.6	0	2273232
3	614341	458371.9	0	614341
4	127646	114593.0	0	127646
5	29822	28648.2	0	29822
6	16790	7162.1	0	16790
7	15592	1790.5	0	15592
8	10650	447.6	0	10650
9	9236	111.9	0	7897 1339
10	14420	28.0	1	11973 2447
11	9789	7.0	1	8026 1763
12	13127	1.7	1	11463 1664
13	5175	0.4	1	4443 732
14	10468	0.4	1	8874 1594
15	13307	0.4	1	11359 1948
16	4570	0.4	1	3841 729
17	4597	0.4	1	3951 646
18	2569	0.4	1	2180 389
19	2747	0.4	1	2311 436
20	3261	0.4	1	2756 505
21	1502	0.4	1	1193 309
22	1422	0.4	1	1091 331
23	1854	0.4	1	1314 540
24	3222	0.4	1	2565 657
25	1102	0.4	1	635 467
26	891	0.4	1	458 433
27	877	0.4	1	262 615
28	1196	0.4	1	620 576
29	837	0.4	1	385 452
30	1032	0.4	1	264 768
31	1903	0.4	1	1352 551
32	3829	0.4	1	2800 1029
33	687	0.4	1	86 601
34	370	0.4	1	75 295
35	281	0.4	1	45 236
36	341	0.4	1	23 318
37	232	0.4	1	90 142
38	89	0.4	1	18 71
39	22	0.4	1	4 18
40	39	0.4	1	1 38
41	43	0.4	1	5 38
42	67	0.4	1	3 64
43	17	0.4	1	2 15
44	33	0.4	1	0 33
45	24	0.4	1	1 23
46	25	0.4	1	0 25
47	17	0.4	1	0 17
48	40	0.4	1	0 40
49	22	0.4	1	0 22
50	18	0.4	1	0 18
51	65	0.4	1	0 65


RUN STATISTICS FOR INPUT FILE: SRR1823638_1.fastq.gz
=============================================
29335802 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Writing report to 'SRR1823638_2.fastq.gz_trimming_report.txt'

SUMMARISING RUN PARAMETERS
==========================
Input filename: SRR1823638_2.fastq.gz
Trimming mode: paired-end
Trim Galore version: 0.4.1
Cutadapt version: 1.8.1
Quality Phred score cutoff: 20
Quality encoding type selected: ASCII+33
Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; auto-detected)
Maximum trimming error rate: 0.1 (default)
Minimum required adapter overlap (stringency): 1 bp
Minimum required sequence length for both reads before a sequence pair gets removed: 20 bp
Running FastQC on the data once trimming has completed
Output file(s) will be GZIP compressed

Writing final adapter and quality trimmed output to SRR1823638_2_trimmed.fq.gz


  >>> Now performing quality (cutoff 20) and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file SRR1823638_2.fastq.gz <<< 
10000000 sequences processed
20000000 sequences processed
This is cutadapt 1.8.1 with Python 2.7.5
Command line parameters: -f fastq -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC SRR1823638_2.fastq.gz
Trimming 1 adapter with at most 10.0% errors in single-end mode ...
Finished in 504.24 s (17 us/read; 3.49 M reads/minute).

=== Summary ===

Total reads processed:              29,335,802
Reads with adapters:                 9,809,529 (33.4%)
Reads written (passing filters):    29,335,802 (100.0%)

Total basepairs processed: 1,496,125,902 bp
Quality-trimmed:             337,757,376 bp (22.6%)
Total written (filtered):  1,142,390,355 bp (76.4%)

=== Adapter 1 ===

Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 9809529 times.

No. of allowed errors:
0-9 bp: 0; 10-13 bp: 1

Bases preceding removed adapters:
  A: 31.0%
  C: 30.7%
  G: 20.2%
  T: 17.4%
  none/other: 0.7%

Overview of removed sequences
length	count	expect	max.err	error counts
1	6437370	7333950.5	0	6437370
2	2406730	1833487.6	0	2406730
3	624433	458371.9	0	624433
4	124303	114593.0	0	124303
5	27677	28648.2	0	27677
6	20623	7162.1	0	20623
7	20103	1790.5	0	20103
8	15263	447.6	0	15263
9	14216	111.9	0	11674 2542
10	20363	28.0	1	17220 3143
11	12850	7.0	1	10801 2049
12	19108	1.7	1	16828 2280
13	6923	0.4	1	6209 714
14	17337	0.4	1	15251 2086
15	7595	0.4	1	6774 821
16	4169	0.4	1	3723 446
17	9262	0.4	1	8196 1066
18	3830	0.4	1	3409 421
19	6573	0.4	1	5924 649
20	1668	0.4	1	1469 199
21	698	0.4	1	614 84
22	1810	0.4	1	1623 187
23	1689	0.4	1	1488 201
24	1907	0.4	1	1680 227
25	374	0.4	1	280 94
26	294	0.4	1	232 62
27	194	0.4	1	150 44
28	355	0.4	1	289 66
29	170	0.4	1	131 39
30	410	0.4	1	277 133
31	249	0.4	1	94 155
32	319	0.4	1	226 93
33	59	0.4	1	30 29
34	49	0.4	1	31 18
35	108	0.4	1	82 26
36	67	0.4	1	51 16
37	104	0.4	1	84 20
38	33	0.4	1	10 23
39	37	0.4	1	18 19
40	29	0.4	1	10 19
41	34	0.4	1	16 18
42	64	0.4	1	27 37
43	11	0.4	1	3 8
44	23	0.4	1	9 14
45	13	0.4	1	1 12
46	6	0.4	1	0 6
47	1	0.4	1	0 1
48	16	0.4	1	0 16
49	3	0.4	1	0 3
50	4	0.4	1	0 4
51	3	0.4	1	0 3


RUN STATISTICS FOR INPUT FILE: SRR1823638_2.fastq.gz
=============================================
29335802 sequences processed in total
The length threshold of paired-end sequences gets evaluated later on (in the validation step)

Validate paired-end files SRR1823638_1_trimmed.fq.gz and SRR1823638_2_trimmed.fq.gz
file_1: SRR1823638_1_trimmed.fq.gz, file_2: SRR1823638_2_trimmed.fq.gz


>>>>> Now validing the length of the 2 paired-end infiles: SRR1823638_1_trimmed.fq.gz and SRR1823638_2_trimmed.fq.gz <<<<<
Writing validated paired-end read 1 reads to SRR1823638_1_val_1.fq.gz
Writing validated paired-end read 2 reads to SRR1823638_2_val_2.fq.gz

Total number of sequences analysed: 29335802

Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 8400168 (28.63%)


  >>> Now running FastQC on the validated data SRR1823638_1_val_1.fq.gz<<<

Started analysis of SRR1823638_1_val_1.fq.gz
Approx 5% complete for SRR1823638_1_val_1.fq.gz
Approx 10% complete for SRR1823638_1_val_1.fq.gz
Approx 15% complete for SRR1823638_1_val_1.fq.gz
Approx 20% complete for SRR1823638_1_val_1.fq.gz
Approx 25% complete for SRR1823638_1_val_1.fq.gz
Approx 30% complete for SRR1823638_1_val_1.fq.gz
Approx 35% complete for SRR1823638_1_val_1.fq.gz
Approx 40% complete for SRR1823638_1_val_1.fq.gz
Approx 45% complete for SRR1823638_1_val_1.fq.gz
Approx 50% complete for SRR1823638_1_val_1.fq.gz
Approx 55% complete for SRR1823638_1_val_1.fq.gz
Approx 60% complete for SRR1823638_1_val_1.fq.gz
Approx 65% complete for SRR1823638_1_val_1.fq.gz
Approx 70% complete for SRR1823638_1_val_1.fq.gz
Approx 75% complete for SRR1823638_1_val_1.fq.gz
Approx 80% complete for SRR1823638_1_val_1.fq.gz
Approx 85% complete for SRR1823638_1_val_1.fq.gz
Approx 90% complete for SRR1823638_1_val_1.fq.gz
Approx 95% complete for SRR1823638_1_val_1.fq.gz
Analysis complete for SRR1823638_1_val_1.fq.gz

  >>> Now running FastQC on the validated data SRR1823638_2_val_2.fq.gz<<<

Started analysis of SRR1823638_2_val_2.fq.gz
Approx 5% complete for SRR1823638_2_val_2.fq.gz
Approx 10% complete for SRR1823638_2_val_2.fq.gz
Approx 15% complete for SRR1823638_2_val_2.fq.gz
Approx 20% complete for SRR1823638_2_val_2.fq.gz
Approx 25% complete for SRR1823638_2_val_2.fq.gz
Approx 30% complete for SRR1823638_2_val_2.fq.gz
Approx 35% complete for SRR1823638_2_val_2.fq.gz
Approx 40% complete for SRR1823638_2_val_2.fq.gz
Approx 45% complete for SRR1823638_2_val_2.fq.gz
Approx 50% complete for SRR1823638_2_val_2.fq.gz
Approx 55% complete for SRR1823638_2_val_2.fq.gz
Approx 60% complete for SRR1823638_2_val_2.fq.gz
Approx 65% complete for SRR1823638_2_val_2.fq.gz
Approx 70% complete for SRR1823638_2_val_2.fq.gz
Approx 75% complete for SRR1823638_2_val_2.fq.gz
Approx 80% complete for SRR1823638_2_val_2.fq.gz
Approx 85% complete for SRR1823638_2_val_2.fq.gz
Approx 90% complete for SRR1823638_2_val_2.fq.gz
Approx 95% complete for SRR1823638_2_val_2.fq.gz
Analysis complete for SRR1823638_2_val_2.fq.gz
Deleting both intermediate output files SRR1823638_1_trimmed.fq.gz and SRR1823638_2_trimmed.fq.gz

====================================================================================================

###CF Trim galore (PE mode) successfully exited, took 30 minutes, 31 seconds..




--------------------------------------------------------------------------------
Module:			kallisto
Run File:		SRR1823638_1.fastq.gz_fastq_kallisto.run
Job ID:			cf_fastq_kallisto_1466004228_kallisto_355
Previous Job ID:	cf_fastq_kallisto_1466004228_trim_galore_604
Date & Time:		16:55, 15-06-2016
--------------------------------------------------------------------------------


Pseudoaligning against /home/rsh46/scratch/Genomes/Mus_musculus/GRCm38/Mus_musculus.GRCm38.cdna.all.idx

---------- Kallisto version information ----------
kallisto, version 0.43.0

------- End of Kallisto version information ------

###CFCMD kallisto quant -t 1 --pseudobam -i /home/rsh46/scratch/Genomes/Mus_musculus/GRCm38/Mus_musculus.GRCm38.cdna.all.idx -o SRR1823638_1_val_1.fq.gz_kallisto_output -b 100 SRR1823638_1_val_1.fq.gz SRR1823638_2_val_2.fq.gz | samtools view -Sb - > SRR1823638_1_val_1.fq.gz_kallisto.bam


[quant] fragment length distribution will be estimated from the data
[index] k-mer length: 31
[index] number of targets: 96,626
[index] number of k-mers: 87,312,671
[index] number of equivalence classes: 333,129
[quant] running in paired-end mode
[quant] will process pair 1: SRR1823638_1_val_1.fq.gz
                             SRR1823638_2_val_2.fq.gz
[quant] finding pseudoalignments for the reads ... done
[quant] processed 20,935,634 reads, 15,820,462 reads pseudoaligned
[quant] estimated average fragment length: 326.198
[   em] quantifying the abundances ... done
[   em] the Expectation-Maximization algorithm ran for 1,061 rounds
[bstrp] running EM for the bootstrap: 1[bstrp] running EM for the bootstrap: 2[bstrp] running EM for the bootstrap: 3[bstrp] running EM for the bootstrap: 4[bstrp] running EM for the bootstrap: 5[bstrp] running EM for the bootstrap: 6[bstrp] running EM for the bootstrap: 7[bstrp] running EM for the bootstrap: 8[bstrp] running EM for the bootstrap: 9[bstrp] running EM for the bootstrap: 10[bstrp] running EM for the bootstrap: 11[bstrp] running EM for the bootstrap: 12[bstrp] running EM for the bootstrap: 13[bstrp] running EM for the bootstrap: 14[bstrp] running EM for the bootstrap: 15[bstrp] running EM for the bootstrap: 16[bstrp] running EM for the bootstrap: 17[bstrp] running EM for the bootstrap: 18[bstrp] running EM for the bootstrap: 19[bstrp] running EM for the bootstrap: 20[bstrp] running EM for the bootstrap: 21[bstrp] running EM for the bootstrap: 22[bstrp] running EM for the bootstrap: 23[bstrp] running EM for the bootstrap: 24[bstrp] running EM for the bootstrap: 25[bstrp] running EM for the bootstrap: 26[bstrp] running EM for the bootstrap: 27[bstrp] running EM for the bootstrap: 28[bstrp] running EM for the bootstrap: 29[bstrp] running EM for the bootstrap: 30[bstrp] running EM for the bootstrap: 31[bstrp] running EM for the bootstrap: 32[bstrp] running EM for the bootstrap: 33[bstrp] running EM for the bootstrap: 34[bstrp] running EM for the bootstrap: 35[bstrp] running EM for the bootstrap: 36[bstrp] running EM for the bootstrap: 37[bstrp] running EM for the bootstrap: 38[bstrp] running EM for the bootstrap: 39[bstrp] running EM for the bootstrap: 40[bstrp] running EM for the bootstrap: 41[bstrp] running EM for the bootstrap: 42[bstrp] running EM for the bootstrap: 43[bstrp] running EM for the bootstrap: 44[bstrp] running EM for the bootstrap: 45[bstrp] running EM for the bootstrap: 46[bstrp] running EM for the bootstrap: 47[bstrp] running EM for the bootstrap: 48[bstrp] running EM for the bootstrap: 49[bstrp] running EM for the bootstrap: 50[bstrp] running EM for the bootstrap: 51[bstrp] running EM for the bootstrap: 52[bstrp] running EM for the bootstrap: 53[bstrp] running EM for the bootstrap: 54[bstrp] running EM for the bootstrap: 55[bstrp] running EM for the bootstrap: 56[bstrp] running EM for the bootstrap: 57[bstrp] running EM for the bootstrap: 58[bstrp] running EM for the bootstrap: 59[bstrp] running EM for the bootstrap: 60[bstrp] running EM for the bootstrap: 61[bstrp] running EM for the bootstrap: 62[bstrp] running EM for the bootstrap: 63[bstrp] running EM for the bootstrap: 64[bstrp] running EM for the bootstrap: 65[bstrp] running EM for the bootstrap: 66[bstrp] running EM for the bootstrap: 67[bstrp] running EM for the bootstrap: 68[bstrp] running EM for the bootstrap: 69[bstrp] running EM for the bootstrap: 70[bstrp] running EM for the bootstrap: 71[bstrp] running EM for the bootstrap: 72[bstrp] running EM for the bootstrap: 73[bstrp] running EM for the bootstrap: 74[bstrp] running EM for the bootstrap: 75[bstrp] running EM for the bootstrap: 76[bstrp] running EM for the bootstrap: 77[bstrp] running EM for the bootstrap: 78[bstrp] running EM for the bootstrap: 79[bstrp] running EM for the bootstrap: 80[bstrp] running EM for the bootstrap: 81[bstrp] running EM for the bootstrap: 82[bstrp] running EM for the bootstrap: 83[bstrp] running EM for the bootstrap: 84[bstrp] running EM for the bootstrap: 85[bstrp] running EM for the bootstrap: 86[bstrp] running EM for the bootstrap: 87[bstrp] running EM for the bootstrap: 88[bstrp] running EM for the bootstrap: 89[bstrp] running EM for the bootstrap: 90[bstrp] running EM for the bootstrap: 91[bstrp] running EM for the bootstrap: 92[bstrp] running EM for the bootstrap: 93[bstrp] running EM for the bootstrap: 94[bstrp] running EM for the bootstrap: 95[bstrp] running EM for the bootstrap: 96[bstrp] running EM for the bootstrap: 97[bstrp] running EM for the bootstrap: 98[bstrp] running EM for the bootstrap: 99[bstrp] running EM for the bootstrap: 100

###CF kallisto (PE mode) successfully exited, took 55 minutes, 42 seconds..



--------------------------------------------------------------------------------
Unrecognised output: (indicated with "-> <-")
--------------------------------------------------------------------------------
-> slurmstepd: Exceeded job memory limit at some point. <-

================================================================================





###CF Run finished at 17:51 15-06-2016


###CF Pipeline fastq_kallisto finished at 17:51 15-06-2016

Sending HTML e-mail with sendmail..
Sent a pipeline e-mail notification to rsh46@cam.ac.uk
